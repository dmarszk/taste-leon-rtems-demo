#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    
    byte arr[384];
} asn1SccUART_String;

#define asn1SccUART_String_REQUIRED_BYTES_FOR_ENCODING       384 
#define asn1SccUART_String_REQUIRED_BITS_FOR_ENCODING        3072
#define asn1SccUART_String_REQUIRED_BYTES_FOR_ACN_ENCODING   384 
#define asn1SccUART_String_REQUIRED_BITS_FOR_ACN_ENCODING    3072
#define asn1SccUART_String_REQUIRED_BYTES_FOR_XER_ENCODING   795

void asn1SccUART_String_Initialize(asn1SccUART_String* pVal);
flag asn1SccUART_String_IsConstraintValid(const asn1SccUART_String* val, int* pErrCode);
#ifndef ERR_asn1SccUART_String 
#define ERR_asn1SccUART_String		1001  /*(SIZE(384))*/
#endif

typedef enum {
    asn1Sccoffline = 0,
    asn1Sccno_position_fix = 1,
    asn1Sccvalid_position_fix = 2
} asn1SccGPS_Status;

#define asn1SccGPS_Status_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccGPS_Status_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccGPS_Status_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccGPS_Status_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccGPS_Status_REQUIRED_BYTES_FOR_XER_ENCODING   64

void asn1SccGPS_Status_Initialize(asn1SccGPS_Status* pVal);
flag asn1SccGPS_Status_IsConstraintValid(const asn1SccGPS_Status* val, int* pErrCode);
#ifndef ERR_asn1SccGPS_Status_unknown_enumeration_value 
#define ERR_asn1SccGPS_Status_unknown_enumeration_value		1003  /**/
#endif
#ifndef ERR_asn1SccGPS_Status 
#define ERR_asn1SccGPS_Status		1002  /**/
#endif

typedef struct {    
    byte arr[8];
} asn1SccCAN_Frame_data;

#define asn1SccCAN_Frame_data_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccCAN_Frame_data_REQUIRED_BITS_FOR_ENCODING        64
#define asn1SccCAN_Frame_data_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccCAN_Frame_data_REQUIRED_BITS_FOR_ACN_ENCODING    64
#define asn1SccCAN_Frame_data_REQUIRED_BYTES_FOR_XER_ENCODING   49

void asn1SccCAN_Frame_data_Initialize(asn1SccCAN_Frame_data* pVal);
flag asn1SccCAN_Frame_data_IsConstraintValid(const asn1SccCAN_Frame_data* val, int* pErrCode);
#ifndef ERR_asn1SccCAN_Frame_data 
#define ERR_asn1SccCAN_Frame_data		1004  /*(SIZE(8))*/
#endif

typedef asn1SccUint asn1SccLEON_UART_Configuration_baud;

#define asn1SccLEON_UART_Configuration_baud_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccLEON_UART_Configuration_baud_REQUIRED_BITS_FOR_ENCODING        20
#define asn1SccLEON_UART_Configuration_baud_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccLEON_UART_Configuration_baud_REQUIRED_BITS_FOR_ACN_ENCODING    20
#define asn1SccLEON_UART_Configuration_baud_REQUIRED_BYTES_FOR_XER_ENCODING   81

void asn1SccLEON_UART_Configuration_baud_Initialize(asn1SccLEON_UART_Configuration_baud* pVal);
flag asn1SccLEON_UART_Configuration_baud_IsConstraintValid(const asn1SccLEON_UART_Configuration_baud* val, int* pErrCode);
#ifndef ERR_asn1SccLEON_UART_Configuration_baud 
#define ERR_asn1SccLEON_UART_Configuration_baud		1005  /*(0 .. 921600)*/
#endif

typedef asn1SccUint asn1SccLEON_UART_Configuration_console_id;

#define asn1SccLEON_UART_Configuration_console_id_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccLEON_UART_Configuration_console_id_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccLEON_UART_Configuration_console_id_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccLEON_UART_Configuration_console_id_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccLEON_UART_Configuration_console_id_REQUIRED_BYTES_FOR_XER_ENCODING   93

void asn1SccLEON_UART_Configuration_console_id_Initialize(asn1SccLEON_UART_Configuration_console_id* pVal);
flag asn1SccLEON_UART_Configuration_console_id_IsConstraintValid(const asn1SccLEON_UART_Configuration_console_id* val, int* pErrCode);
#ifndef ERR_asn1SccLEON_UART_Configuration_console_id 
#define ERR_asn1SccLEON_UART_Configuration_console_id		1006  /*(0 .. 9)*/
#endif

typedef struct {
    asn1SccLEON_UART_Configuration_console_id console_id;
    asn1SccLEON_UART_Configuration_baud baud;
} asn1SccLEON_UART_Configuration;

#define asn1SccLEON_UART_Configuration_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccLEON_UART_Configuration_REQUIRED_BITS_FOR_ENCODING        24
#define asn1SccLEON_UART_Configuration_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccLEON_UART_Configuration_REQUIRED_BITS_FOR_ACN_ENCODING    24
#define asn1SccLEON_UART_Configuration_REQUIRED_BYTES_FOR_XER_ENCODING   129

void asn1SccLEON_UART_Configuration_Initialize(asn1SccLEON_UART_Configuration* pVal);
flag asn1SccLEON_UART_Configuration_IsConstraintValid(const asn1SccLEON_UART_Configuration* val, int* pErrCode);


typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1007  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1008  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1009  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1010  /*(0 .. 255)*/
#endif

typedef struct {
    asn1SccT_UInt32 id;
    asn1SccT_UInt8 len;
    asn1SccCAN_Frame_data data;
} asn1SccCAN_Frame;

#define asn1SccCAN_Frame_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccCAN_Frame_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccCAN_Frame_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccCAN_Frame_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccCAN_Frame_REQUIRED_BYTES_FOR_XER_ENCODING   112

void asn1SccCAN_Frame_Initialize(asn1SccCAN_Frame* pVal);
flag asn1SccCAN_Frame_IsConstraintValid(const asn1SccCAN_Frame* val, int* pErrCode);


typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */












 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccoffline	asn1Sccoffline
#define ENUM_asn1Sccno_position_fix	asn1Sccno_position_fix
#define ENUM_asn1Sccvalid_position_fix	asn1Sccvalid_position_fix

#endif

#endif
